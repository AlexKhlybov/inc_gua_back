{
	"info": {
		"_postman_id": "0cbe04f0-8e6c-47f1-b5b9-e5eb36bdb6bd",
		"name": "STRAHGRANT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "user",
					"item": [
						{
							"name": "user_user_login_by_email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData = pm.response.json();",
											"",
											"if (!jsonData.detail){",
											"    pm.collectionVariables.set(\"user_token\", jsonData.token)",
											"};",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"token\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"token\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{login}}\",\n  \"password\": \"{{password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/user/user/login_by_email/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										"login_by_email",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user_user_get_reset_password_link",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"const jsonDate = pm.response.json();",
											"",
											"pm.test(\"The response to the request is valid\", function () {",
											"    pm.expect(jsonDate.message).to.include(\"reset password link sended\");",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"message\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"message\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{login}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/user/user/get_reset_password_link/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										"get_reset_password_link",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user_user_reset_password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonDate = pm.response.json();",
											"",
											"pm.test(\"The status is correct\", function () {",
											"    pm.expect(jsonDate.status).to.true;",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"status\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"status\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"reset_link\": \"{{reset_link}}\",\n  \"password\": \"garpixdev911\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/user/user/reset_password/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										"reset_password",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user_user_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"if (jsonData.length > 0) {",
											"    for (i = 0; i < jsonData.length; i++) {",
											"        if (jsonData[i].email === pm.collectionVariables.get('login')) {",
											"            pm.collectionVariables.set(\"id_user\", jsonData[i].id)",
											"        }",
											"    }",
											"};",
											"",
											"// тут пока не понятный тип поля \"role\", сейчас null, будет стринга",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"first_name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"patronymic\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"last_name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"email\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"phone\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"is_active\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"date_joined\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"role\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"first_name\",",
											"        \"patronymic\",",
											"        \"last_name\",",
											"        \"email\",",
											"        \"phone\",",
											"        \"is_active\",",
											"        \"date_joined\",",
											"        \"role\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/user/user/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user_user_get_underwriter_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"const jsonData = pm.response.json();",
											"",
											"if(jsonData.length > 0){",
											"    for(i = 0; i < jsonData.length; i++ ){",
											"        if(jsonData[i].email === pm.collectionVariables.get('login_underwriter')){",
											"            pm.collectionVariables.set(\"id_underwriter\", jsonData[i].id)",
											"        }",
											"    }",
											"};",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"first_name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"last_name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"email\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"phone\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"is_active\": {",
											"          \"type\": \"boolean\"",
											"        },",
											"        \"date_joined\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"role\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"first_name\",",
											"        \"last_name\",",
											"        \"email\",",
											"        \"phone\",",
											"        \"is_active\",",
											"        \"date_joined\",",
											"        \"role\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/user/user/get_underwriter_list/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										"get_underwriter_list",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user_user_read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											" const schemaTest = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"id\": {\r",
											"      \"type\": \"integer\"\r",
											"    },\r",
											"    \"first_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"patronymic\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"last_name\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"email\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"phone\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"is_active\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"date_joined\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"role\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"id\",\r",
											"    \"first_name\",\r",
											"    \"patronymic\",\r",
											"    \"last_name\",\r",
											"    \"email\",\r",
											"    \"phone\",\r",
											"    \"is_active\",\r",
											"    \"date_joined\",\r",
											"    \"role\"\r",
											"  ]\r",
											"};\r",
											" pm.test('Shema schemaTest Valid', () => {\r",
											"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{url}}/user/user/{{id_user}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										"{{id_user}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "user_user_logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"pm.test(\"The response to the request is valid\", function () {",
											"    pm.expect(jsonData.is_anonymous).to.true;",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"is_anonymous\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"is_anonymous\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"{{login}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/user/user/logout/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										"logout",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Date is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "bank",
					"item": [
						{
							"name": "bank",
							"item": [
								{
									"name": "bank_bank_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"\r",
													"//некоторые поля пока нулл,потом пофиксить, как изменится\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"array\",\r",
													"  \"items\": [\r",
													"    {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"title\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"inn\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"registration_address\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"bik\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"kpp\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"correspondent_account_cb\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"registration_date\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"region\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"license_number\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"eio_surname\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"eio_name\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"eio_patronymic\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"eio_appointment_date\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"contact_person_surname\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"contact_person_name\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"contact_patronymic\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"email\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"phone\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"logo\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"title\",\r",
													"        \"inn\",\r",
													"        \"registration_address\",\r",
													"        \"bik\",\r",
													"        \"kpp\",\r",
													"        \"correspondent_account_cb\",\r",
													"        \"registration_date\",\r",
													"        \"region\",\r",
													"        \"license_number\",\r",
													"        \"eio_surname\",\r",
													"        \"eio_name\",\r",
													"        \"eio_patronymic\",\r",
													"        \"eio_appointment_date\",\r",
													"        \"contact_person_surname\",\r",
													"        \"contact_person_name\",\r",
													"        \"contact_patronymic\",\r",
													"        \"email\",\r",
													"        \"phone\",\r",
													"        \"logo\"\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody); \r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if(jsonData.length > 0){\r",
													"    pm.collectionVariables.set('id_bank', jsonData[0].id)\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "X-CSRFToken JJUhvli8NmeufXq4eq3H4gmkzJKGT8MMwL207TCT1ThmMHWlt6qguVuTR3K8cYrK",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "bank_bank_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"title\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"inn\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"registration_address\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"bik\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"kpp\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"correspondent_account_cb\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"registration_date\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"region\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"license_number\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eio_surname\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eio_name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eio_patronymic\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"eio_appointment_date\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"contact_person_surname\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"contact_person_name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"contact_patronymic\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"email\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"phone\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"logo\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"title\",\r",
													"    \"inn\",\r",
													"    \"registration_address\",\r",
													"    \"bik\",\r",
													"    \"kpp\",\r",
													"    \"correspondent_account_cb\",\r",
													"    \"registration_date\",\r",
													"    \"region\",\r",
													"    \"license_number\",\r",
													"    \"eio_surname\",\r",
													"    \"eio_name\",\r",
													"    \"eio_patronymic\",\r",
													"    \"eio_appointment_date\",\r",
													"    \"contact_person_surname\",\r",
													"    \"contact_person_name\",\r",
													"    \"contact_patronymic\",\r",
													"    \"email\",\r",
													"    \"phone\",\r",
													"    \"logo\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody); \r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank/{{id_bank}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank",
												"{{id_bank}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "contract",
							"item": [
								{
									"name": "bank_bank_contract_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"array\",\r",
													"  \"items\": [\r",
													"    {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"summary_protocol_name\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"summary_protocol_number\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"summary_protocol_date\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"subject_of_contract\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"bank\": {\r",
													"          \"type\": \"integer\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"summary_protocol_name\",\r",
													"        \"summary_protocol_number\",\r",
													"        \"summary_protocol_date\",\r",
													"        \"subject_of_contract\",\r",
													"        \"bank\"\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => { \r",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"\r",
													"if(jsonData.length > 0){\r",
													"    pm.collectionVariables.set('id_contract_bank', jsonData[0].id)\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "X-CSRFToken JJUhvli8NmeufXq4eq3H4gmkzJKGT8MMwL207TCT1ThmMHWlt6qguVuTR3K8cYrK",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_contract/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_contract",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "bank_bank_contract_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"summary_protocol_name\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"summary_protocol_number\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"summary_protocol_date\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"subject_of_contract\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"bank\": {\r",
													"      \"type\": \"integer\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"summary_protocol_name\",\r",
													"    \"summary_protocol_number\",\r",
													"    \"summary_protocol_date\",\r",
													"    \"subject_of_contract\",\r",
													"    \"bank\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "X-CSRFToken JJUhvli8NmeufXq4eq3H4gmkzJKGT8MMwL207TCT1ThmMHWlt6qguVuTR3K8cYrK",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_contract/{{id_contract_bank}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_contract",
												"{{id_contract_bank}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "document",
							"item": [
								{
									"name": "bank_bank_document_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"array\",\r",
													"  \"items\": [\r",
													"    {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"bank\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"document\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"document_title\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"document_type\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"bank\",\r",
													"        \"document\",\r",
													"        \"document_title\",\r",
													"        \"document_type\"\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody);\r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if(jsonData.length > 0){\r",
													"    pm.collectionVariables.set('id_bank_document', jsonData[0].id)\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_document/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_document",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "bank_bank_document_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schemaTest={\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"bank\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"document\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"document_title\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"document_type\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"bank\",\r",
													"    \"document\",\r",
													"    \"document_title\",\r",
													"    \"document_type\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody);\r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_document/{{id_bank_document}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_document",
												"{{id_bank_document}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "guarantee",
							"item": [
								{
									"name": "bank_bank_guarantee_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"array\",\r",
													"  \"items\": [\r",
													"    {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"status\": {\r",
													"          \"type\": \"object\",\r",
													"          \"properties\": {\r",
													"            \"id\": {\r",
													"              \"type\": \"integer\"\r",
													"            },\r",
													"            \"title\": {\r",
													"              \"type\": \"string\"\r",
													"            },\r",
													"            \"description\": {\r",
													"              \"type\": \"string\"\r",
													"            }\r",
													"          },\r",
													"          \"required\": [\r",
													"            \"id\",\r",
													"            \"title\",\r",
													"            \"description\"\r",
													"          ]\r",
													"        },\r",
													"        \"number\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"date\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"maintain_a_guarantee\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"sum\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"disclosure_conditions\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"rights_and_liabilities_of_the_parties\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"termination_of_liabilities\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"bank\": {\r",
													"          \"type\": \"integer\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"status\",\r",
													"        \"number\",\r",
													"        \"date\",\r",
													"        \"maintain_a_guarantee\",\r",
													"        \"sum\",\r",
													"        \"disclosure_conditions\",\r",
													"        \"rights_and_liabilities_of_the_parties\",\r",
													"        \"termination_of_liabilities\",\r",
													"        \"bank\"\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => { \r",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"\r",
													"if(jsonData.length > 0){\r",
													"    pm.collectionVariables.set('id_guarantee_bank', jsonData[0].id)\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "X-CSRFToken JJUhvli8NmeufXq4eq3H4gmkzJKGT8MMwL207TCT1ThmMHWlt6qguVuTR3K8cYrK",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_guarantee/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_guarantee",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "bank_bank_guarantee_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"status\": {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"title\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"description\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"title\",\r",
													"        \"description\"\r",
													"      ]\r",
													"    },\r",
													"    \"number\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"date\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"maintain_a_guarantee\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"sum\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"disclosure_conditions\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"rights_and_liabilities_of_the_parties\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"termination_of_liabilities\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"bank\": {\r",
													"      \"type\": \"integer\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"status\",\r",
													"    \"number\",\r",
													"    \"date\",\r",
													"    \"maintain_a_guarantee\",\r",
													"    \"sum\",\r",
													"    \"disclosure_conditions\",\r",
													"    \"rights_and_liabilities_of_the_parties\",\r",
													"    \"termination_of_liabilities\",\r",
													"    \"bank\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => { \r",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "X-CSRFToken JJUhvli8NmeufXq4eq3H4gmkzJKGT8MMwL207TCT1ThmMHWlt6qguVuTR3K8cYrK",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_guarantee/{{id_guarantee_bank}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_guarantee",
												"{{id_guarantee_bank}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "bank_bank_guarantee_status_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"array\",\r",
													"  \"items\": [\r",
													"    {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"title\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"description\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"title\",\r",
													"        \"description\"\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => { \r",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"\r",
													"if(jsonData.length > 0){\r",
													"    pm.collectionVariables.set('id_guarantee_status_bank', jsonData[0].id)\r",
													"}\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "X-CSRFToken JJUhvli8NmeufXq4eq3H4gmkzJKGT8MMwL207TCT1ThmMHWlt6qguVuTR3K8cYrK",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_guarantee_status/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_guarantee_status",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "bank_bank_guarantee_status_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"title\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"description\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"title\",\r",
													"    \"description\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => { \r",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
												"key": "Authorization",
												"value": "X-CSRFToken JJUhvli8NmeufXq4eq3H4gmkzJKGT8MMwL207TCT1ThmMHWlt6qguVuTR3K8cYrK",
												"type": "text"
											},
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_guarantee_status/{{id_guarantee_status_bank}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_guarantee_status",
												"{{id_guarantee_status_bank}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "limits",
							"item": [
								{
									"name": "bank_bank_limits_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"array\",\r",
													"  \"items\": [\r",
													"    {\r",
													"      \"type\": \"object\",\r",
													"      \"properties\": {\r",
													"        \"id\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"bank\": {\r",
													"          \"type\": \"integer\"\r",
													"        },\r",
													"        \"total_limit\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"current_guaranties_sum\": {\r",
													"          \"type\": \"string\"\r",
													"        },\r",
													"        \"orders_sum\": {\r",
													"          \"type\": \"string\"\r",
													"        }\r",
													"      },\r",
													"      \"required\": [\r",
													"        \"id\",\r",
													"        \"bank\",\r",
													"        \"total_limit\",\r",
													"        \"current_guaranties_sum\",\r",
													"        \"orders_sum\"\r",
													"      ]\r",
													"    }\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody);\r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"if(jsonData.length > 0){\r",
													"    pm.collectionVariables.set('id_bank_limits', jsonData[0].id)\r",
													"}\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_limits/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_limits",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "bank_bank_limits_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"id\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"bank\": {\r",
													"      \"type\": \"integer\"\r",
													"    },\r",
													"    \"total_limit\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"current_guaranties_sum\": {\r",
													"      \"type\": \"string\"\r",
													"    },\r",
													"    \"orders_sum\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"id\",\r",
													"    \"bank\",\r",
													"    \"total_limit\",\r",
													"    \"current_guaranties_sum\",\r",
													"    \"orders_sum\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody);\r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/bank/bank_limits/{{id_bank_limits}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_limits",
												"{{id_bank_limits}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "bank_bank_limits_update_bank_limits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"bank\": {{id_bank}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/bank/bank_limits/update_bank_limits/",
											"host": [
												"{{url}}"
											],
											"path": [
												"bank",
												"bank_limits",
												"update_bank_limits",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\");",
									"});",
									"pm.test(\"Date is present\", function () {",
									"    pm.response.to.have.header(\"Date\");",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "order",
					"item": [
						{
							"name": "auction",
							"item": [
								{
									"name": "order_auction_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0) {",
													"    pm.collectionVariables.set('id_auction', jsonData[0].id)",
													"};",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"number\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"number\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/auction/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"auction",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_auction_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"number\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"number\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/auction/{{id_auction}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"auction",
												"{{id_auction}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "contest",
							"item": [
								{
									"name": "order_contest_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0){",
													"    pm.collectionVariables.set(\"id_contest\", jsonData[0].id)",
													"};",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"lot\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"number\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"number\"",
													"          ]",
													"        },",
													"        \"type\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\"",
													"          ]",
													"        },",
													"        \"contract\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"purchase\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"number\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"purchase_object\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"number\",",
													"                \"purchase_object\"",
													"              ]",
													"            },",
													"            \"beneficiary\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"title\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"inn\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"region\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"okved\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"registration_address\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"registration_date\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"inn\",",
													"                \"region\",",
													"                \"okved\",",
													"                \"registration_address\",",
													"                \"registration_date\"",
													"              ]",
													"            },",
													"            \"sum\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"security_amount\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"term\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"availability_payment\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"availability_sum\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"availability_share\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"treasury_support\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"number\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"purchase\",",
													"            \"beneficiary\",",
													"            \"sum\",",
													"            \"security_amount\",",
													"            \"term\",",
													"            \"availability_payment\",",
													"            \"availability_sum\",",
													"            \"availability_share\",",
													"            \"treasury_support\",",
													"            \"number\"",
													"          ]",
													"        },",
													"        \"defined\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"fz\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"okpd2\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"nmck\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"lot\",",
													"        \"type\",",
													"        \"contract\",",
													"        \"defined\",",
													"        \"fz\",",
													"        \"okpd2\",",
													"        \"nmck\"",
													"      ]",
													"    },",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"lot\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"number\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"number\"",
													"          ]",
													"        },",
													"        \"type\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\"",
													"          ]",
													"        },",
													"        \"contract\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"purchase\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"number\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"purchase_object\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"number\",",
													"                \"purchase_object\"",
													"              ]",
													"            },",
													"            \"beneficiary\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"title\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"inn\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"region\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"okved\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"registration_address\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"registration_date\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"inn\",",
													"                \"region\",",
													"                \"okved\",",
													"                \"registration_address\",",
													"                \"registration_date\"",
													"              ]",
													"            },",
													"            \"sum\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"security_amount\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"term\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"availability_payment\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"availability_sum\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"availability_share\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"treasury_support\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"number\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"purchase\",",
													"            \"beneficiary\",",
													"            \"sum\",",
													"            \"security_amount\",",
													"            \"term\",",
													"            \"availability_payment\",",
													"            \"availability_sum\",",
													"            \"availability_share\",",
													"            \"treasury_support\",",
													"            \"number\"",
													"          ]",
													"        },",
													"        \"defined\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"fz\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"okpd2\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"nmck\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"lot\",",
													"        \"type\",",
													"        \"contract\",",
													"        \"defined\",",
													"        \"fz\",",
													"        \"okpd2\",",
													"        \"nmck\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/contest/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"contest",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_contest_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"lot\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"number\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"number\"",
													"      ]",
													"    },",
													"    \"type\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\"",
													"      ]",
													"    },",
													"    \"contract\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"purchase\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"number\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"purchase_object\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"number\",",
													"            \"purchase_object\"",
													"          ]",
													"        },",
													"        \"beneficiary\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"inn\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"region\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"okved\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_address\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_date\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"inn\",",
													"            \"region\",",
													"            \"okved\",",
													"            \"registration_address\",",
													"            \"registration_date\"",
													"          ]",
													"        },",
													"        \"sum\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"security_amount\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"term\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"availability_payment\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"availability_sum\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"availability_share\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"treasury_support\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"number\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"purchase\",",
													"        \"beneficiary\",",
													"        \"sum\",",
													"        \"security_amount\",",
													"        \"term\",",
													"        \"availability_payment\",",
													"        \"availability_sum\",",
													"        \"availability_share\",",
													"        \"treasury_support\",",
													"        \"number\"",
													"      ]",
													"    },",
													"    \"defined\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"fz\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"okpd2\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"nmck\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"lot\",",
													"    \"type\",",
													"    \"contract\",",
													"    \"defined\",",
													"    \"fz\",",
													"    \"okpd2\",",
													"    \"nmck\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/contest/{{id_contest}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"contest",
												"{{id_contest}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_contest_type_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0) {",
													"    pm.collectionVariables.set('id_contest_type', jsonData[0].id)",
													"};",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/contest_type/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"contest_type",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_contest_type_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"title\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/contest_type/{{id_contest_type}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"contest_type",
												"{{id_contest_type}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "contract",
							"item": [
								{
									"name": "order_contract_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"purchase\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"number\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"purchase_object\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"number\",",
													"            \"purchase_object\"",
													"          ]",
													"        },",
													"        \"beneficiary\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"inn\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"region\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"okved\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_address\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_date\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"inn\",",
													"            \"region\",",
													"            \"okved\",",
													"            \"registration_address\",",
													"            \"registration_date\"",
													"          ]",
													"        },",
													"        \"sum\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"security_amount\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"term\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"availability_payment\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"availability_sum\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"availability_share\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"treasury_support\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"number\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"purchase\",",
													"        \"beneficiary\",",
													"        \"sum\",",
													"        \"security_amount\",",
													"        \"term\",",
													"        \"availability_payment\",",
													"        \"availability_sum\",",
													"        \"availability_share\",",
													"        \"treasury_support\",",
													"        \"number\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});",
													"",
													"if(jsonData.length > 0){",
													"    pm.collectionVariables.set('id_contract', jsonData[0].id)",
													"};",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/order/contract/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"contract",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_contract_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"purchase\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"number\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"purchase_object\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"number\",",
													"        \"purchase_object\"",
													"      ]",
													"    },",
													"    \"beneficiary\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"inn\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"region\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"okved\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"registration_address\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"registration_date\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"inn\",",
													"        \"region\",",
													"        \"okved\",",
													"        \"registration_address\",",
													"        \"registration_date\"",
													"      ]",
													"    },",
													"    \"sum\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"security_amount\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"term\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"availability_payment\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"availability_sum\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"availability_share\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"treasury_support\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"number\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"purchase\",",
													"    \"beneficiary\",",
													"    \"sum\",",
													"    \"security_amount\",",
													"    \"term\",",
													"    \"availability_payment\",",
													"    \"availability_sum\",",
													"    \"availability_share\",",
													"    \"treasury_support\",",
													"    \"number\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/order/contract/{{id_contract}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"contract",
												"{{id_contract}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "fp",
							"item": [
								{
									"name": "order_fp_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0){",
													"    pm.collectionVariables.set(\"id_fp\", jsonData[0].id)",
													"}",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"weight\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"mark\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"weight\",",
													"        \"mark\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/fp/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"fp",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_fp_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"weight\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"mark\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"title\",",
													"    \"weight\",",
													"    \"mark\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/fp/{{id_fp}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"fp",
												"{{id_fp}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "guaranty",
							"item": [
								{
									"name": "order_guaranty_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"sum\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"start_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"end_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"term\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"take_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"availability_without_acceptance\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"security_under_guarantee\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"provision\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"provision_form\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"provision_sum\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"sum\",",
													"        \"start_date\",",
													"        \"end_date\",",
													"        \"term\",",
													"        \"take_date\",",
													"        \"availability_without_acceptance\",",
													"        \"security_under_guarantee\",",
													"        \"provision\",",
													"        \"provision_form\",",
													"        \"provision_sum\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});",
													"",
													"if(jsonData.length > 0){",
													"    pm.collectionVariables.set('id_guaranty', jsonData[0].id)",
													"};",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/guaranty/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"guaranty",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_guaranty_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"sum\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"start_date\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"end_date\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"term\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"take_date\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"availability_without_acceptance\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"security_under_guarantee\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"provision\": {",
													"      \"type\": \"boolean\"",
													"    },",
													"    \"provision_form\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"provision_sum\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"sum\",",
													"    \"start_date\",",
													"    \"end_date\",",
													"    \"term\",",
													"    \"take_date\",",
													"    \"availability_without_acceptance\",",
													"    \"security_under_guarantee\",",
													"    \"provision\",",
													"    \"provision_form\",",
													"    \"provision_sum\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/order/guaranty/{{id_guaranty}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"guaranty",
												"{{id_guaranty}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "lot",
							"item": [
								{
									"name": "order_lot_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0){",
													"    pm.collectionVariables.set(\"id_lot\", jsonData[0].id)",
													"}",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"number\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"number\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/lot/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"lot",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_lot_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"number\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"number\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/lot/{{id_lot}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"lot",
												"{{id_lot}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "order",
							"item": [
								{
									"name": "order_order_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"pm.test(\"Date is present\", function () {",
													"    pm.response.to.have.header(\"Date\");",
													"});",
													"",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"status\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"description\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"description\"",
													"          ]",
													"        },",
													"        \"principal\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"inn\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"region\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"okved\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"limit\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"first_name\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"last_name\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"patronymic\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"birth_date\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"birth_place\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"passport_series\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"passport_number\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"department_code\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"collect_date\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"collect_by_whom\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_address\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"citizenship\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"inn\",",
													"            \"region\",",
													"            \"okved\",",
													"            \"limit\",",
													"            \"first_name\",",
													"            \"last_name\",",
													"            \"patronymic\",",
													"            \"birth_date\",",
													"            \"birth_place\",",
													"            \"passport_series\",",
													"            \"passport_number\",",
													"            \"department_code\",",
													"            \"collect_date\",",
													"            \"collect_by_whom\",",
													"            \"registration_address\",",
													"            \"citizenship\"",
													"          ]",
													"        },",
													"        \"beneficiary\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"inn\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"region\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"okved\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_address\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_date\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"inn\",",
													"            \"region\",",
													"            \"okved\",",
													"            \"registration_address\",",
													"            \"registration_date\"",
													"          ]",
													"        },",
													"        \"guaranty\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"sum\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"start_date\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"end_date\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"term\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"take_date\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"availability_without_acceptance\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"security_under_guarantee\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"provision\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"provision_form\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"provision_sum\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"sum\",",
													"            \"start_date\",",
													"            \"end_date\",",
													"            \"term\",",
													"            \"take_date\",",
													"            \"availability_without_acceptance\",",
													"            \"security_under_guarantee\",",
													"            \"provision\",",
													"            \"provision_form\",",
													"            \"provision_sum\"",
													"          ]",
													"        },",
													"        \"contest\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"lot\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"number\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"number\"",
													"              ]",
													"            },",
													"            \"type\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"title\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"title\"",
													"              ]",
													"            },",
													"            \"contract\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"purchase\": {",
													"                  \"type\": \"object\",",
													"                  \"properties\": {",
													"                    \"id\": {",
													"                      \"type\": \"integer\"",
													"                    },",
													"                    \"number\": {",
													"                      \"type\": \"string\"",
													"                    },",
													"                    \"purchase_object\": {",
													"                      \"type\": \"string\"",
													"                    }",
													"                  },",
													"                  \"required\": [",
													"                    \"id\",",
													"                    \"number\",",
													"                    \"purchase_object\"",
													"                  ]",
													"                },",
													"                \"beneficiary\": {",
													"                  \"type\": \"object\",",
													"                  \"properties\": {",
													"                    \"id\": {",
													"                      \"type\": \"integer\"",
													"                    },",
													"                    \"title\": {",
													"                      \"type\": \"string\"",
													"                    },",
													"                    \"inn\": {",
													"                      \"type\": \"string\"",
													"                    },",
													"                    \"region\": {",
													"                      \"type\": \"string\"",
													"                    },",
													"                    \"okved\": {",
													"                      \"type\": \"string\"",
													"                    },",
													"                    \"registration_address\": {",
													"                      \"type\": \"string\"",
													"                    },",
													"                    \"registration_date\": {",
													"                      \"type\": \"string\"",
													"                    }",
													"                  },",
													"                  \"required\": [",
													"                    \"id\",",
													"                    \"title\",",
													"                    \"inn\",",
													"                    \"region\",",
													"                    \"okved\",",
													"                    \"registration_address\",",
													"                    \"registration_date\"",
													"                  ]",
													"                },",
													"                \"sum\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"security_amount\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"term\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"availability_payment\": {",
													"                  \"type\": \"boolean\"",
													"                },",
													"                \"availability_sum\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"availability_share\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"treasury_support\": {",
													"                  \"type\": \"boolean\"",
													"                },",
													"                \"number\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"purchase\",",
													"                \"beneficiary\",",
													"                \"sum\",",
													"                \"security_amount\",",
													"                \"term\",",
													"                \"availability_payment\",",
													"                \"availability_sum\",",
													"                \"availability_share\",",
													"                \"treasury_support\",",
													"                \"number\"",
													"              ]",
													"            },",
													"            \"defined\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"fz\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"okpd2\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"nmck\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"lot\",",
													"            \"type\",",
													"            \"contract\",",
													"            \"defined\",",
													"            \"fz\",",
													"            \"okpd2\",",
													"            \"nmck\"",
													"          ]",
													"        },",
													"        \"ps\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"value\": {",
													"              \"type\": \"boolean\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"value\"",
													"          ]",
													"        },",
													"        \"fp\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"weight\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"mark\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"weight\",",
													"            \"mark\"",
													"          ]",
													"        },",
													"        \"sf\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"value\": {",
													"              \"type\": \"boolean\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"value\"",
													"          ]",
													"        },",
													"        \"bank\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"inn\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_address\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"bik\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"kpp\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"correspondent_account_cb\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"registration_date\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"region\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"license_number\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"eio_surname\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"eio_name\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"eio_patronymic\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"eio_appointment_date\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"contact_person_surname\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"contact_person_name\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"contact_patronymic\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"email\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"phone\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"logo\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\",",
													"            \"inn\",",
													"            \"registration_address\",",
													"            \"bik\",",
													"            \"kpp\",",
													"            \"correspondent_account_cb\",",
													"            \"registration_date\",",
													"            \"region\",",
													"            \"license_number\",",
													"            \"eio_surname\",",
													"            \"eio_name\",",
													"            \"eio_patronymic\",",
													"            \"eio_appointment_date\",",
													"            \"contact_person_surname\",",
													"            \"contact_person_name\",",
													"            \"contact_patronymic\",",
													"            \"email\",",
													"            \"phone\",",
													"            \"logo\"",
													"          ]",
													"        },",
													"        \"underwriter\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"first_name\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"patronymic\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"last_name\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"email\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"phone\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"is_active\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"date_joined\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"role\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"first_name\",",
													"            \"patronymic\",",
													"            \"last_name\",",
													"            \"email\",",
													"            \"phone\",",
													"            \"is_active\",",
													"            \"date_joined\",",
													"            \"role\"",
													"          ]",
													"        },",
													"        \"pnt\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"eis_link\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"start_date\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"status\",",
													"        \"principal\",",
													"        \"beneficiary\",",
													"        \"guaranty\",",
													"        \"contest\",",
													"        \"ps\",",
													"        \"fp\",",
													"        \"sf\",",
													"        \"bank\",",
													"        \"underwriter\",",
													"        \"pnt\",",
													"        \"eis_link\",",
													"        \"start_date\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});",
													"",
													"if(jsonData.length > 0){",
													"    pm.collectionVariables.set('id_order', jsonData[0].id)",
													"};",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/order/order/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_order_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    pm.response.to.have.header(\"Date\");",
													"});",
													"",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"status\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"description\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"description\"",
													"      ]",
													"    },",
													"    \"principal\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"inn\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"region\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"okved\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"limit\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"first_name\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"last_name\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"patronymic\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"birth_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"birth_place\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"passport_series\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"passport_number\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"department_code\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"collect_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"collect_by_whom\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"registration_address\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"citizenship\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"inn\",",
													"        \"region\",",
													"        \"okved\",",
													"        \"limit\",",
													"        \"first_name\",",
													"        \"last_name\",",
													"        \"patronymic\",",
													"        \"birth_date\",",
													"        \"birth_place\",",
													"        \"passport_series\",",
													"        \"passport_number\",",
													"        \"department_code\",",
													"        \"collect_date\",",
													"        \"collect_by_whom\",",
													"        \"registration_address\",",
													"        \"citizenship\"",
													"      ]",
													"    },",
													"    \"beneficiary\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"inn\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"region\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"okved\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"registration_address\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"registration_date\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"inn\",",
													"        \"region\",",
													"        \"okved\",",
													"        \"registration_address\",",
													"        \"registration_date\"",
													"      ]",
													"    },",
													"    \"guaranty\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"sum\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"start_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"end_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"term\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"take_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"availability_without_acceptance\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"security_under_guarantee\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"provision\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"provision_form\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"provision_sum\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"sum\",",
													"        \"start_date\",",
													"        \"end_date\",",
													"        \"term\",",
													"        \"take_date\",",
													"        \"availability_without_acceptance\",",
													"        \"security_under_guarantee\",",
													"        \"provision\",",
													"        \"provision_form\",",
													"        \"provision_sum\"",
													"      ]",
													"    },",
													"    \"contest\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"lot\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"number\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"number\"",
													"          ]",
													"        },",
													"        \"type\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"title\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"title\"",
													"          ]",
													"        },",
													"        \"contract\": {",
													"          \"type\": \"object\",",
													"          \"properties\": {",
													"            \"id\": {",
													"              \"type\": \"integer\"",
													"            },",
													"            \"purchase\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"number\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"purchase_object\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"number\",",
													"                \"purchase_object\"",
													"              ]",
													"            },",
													"            \"beneficiary\": {",
													"              \"type\": \"object\",",
													"              \"properties\": {",
													"                \"id\": {",
													"                  \"type\": \"integer\"",
													"                },",
													"                \"title\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"inn\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"region\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"okved\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"registration_address\": {",
													"                  \"type\": \"string\"",
													"                },",
													"                \"registration_date\": {",
													"                  \"type\": \"string\"",
													"                }",
													"              },",
													"              \"required\": [",
													"                \"id\",",
													"                \"title\",",
													"                \"inn\",",
													"                \"region\",",
													"                \"okved\",",
													"                \"registration_address\",",
													"                \"registration_date\"",
													"              ]",
													"            },",
													"            \"sum\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"security_amount\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"term\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"availability_payment\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"availability_sum\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"availability_share\": {",
													"              \"type\": \"string\"",
													"            },",
													"            \"treasury_support\": {",
													"              \"type\": \"boolean\"",
													"            },",
													"            \"number\": {",
													"              \"type\": \"string\"",
													"            }",
													"          },",
													"          \"required\": [",
													"            \"id\",",
													"            \"purchase\",",
													"            \"beneficiary\",",
													"            \"sum\",",
													"            \"security_amount\",",
													"            \"term\",",
													"            \"availability_payment\",",
													"            \"availability_sum\",",
													"            \"availability_share\",",
													"            \"treasury_support\",",
													"            \"number\"",
													"          ]",
													"        },",
													"        \"defined\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"fz\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"okpd2\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"nmck\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"lot\",",
													"        \"type\",",
													"        \"contract\",",
													"        \"defined\",",
													"        \"fz\",",
													"        \"okpd2\",",
													"        \"nmck\"",
													"      ]",
													"    },",
													"    \"ps\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"value\": {",
													"          \"type\": \"boolean\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"value\"",
													"      ]",
													"    },",
													"    \"fp\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"weight\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"mark\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"weight\",",
													"        \"mark\"",
													"      ]",
													"    },",
													"    \"sf\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"value\": {",
													"          \"type\": \"boolean\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"value\"",
													"      ]",
													"    },",
													"    \"bank\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"inn\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"registration_address\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"bik\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"kpp\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"correspondent_account_cb\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"registration_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"region\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"license_number\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"eio_surname\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"eio_name\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"eio_patronymic\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"eio_appointment_date\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"contact_person_surname\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"contact_person_name\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"contact_patronymic\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"email\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"phone\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"logo\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"inn\",",
													"        \"registration_address\",",
													"        \"bik\",",
													"        \"kpp\",",
													"        \"correspondent_account_cb\",",
													"        \"registration_date\",",
													"        \"region\",",
													"        \"license_number\",",
													"        \"eio_surname\",",
													"        \"eio_name\",",
													"        \"eio_patronymic\",",
													"        \"eio_appointment_date\",",
													"        \"contact_person_surname\",",
													"        \"contact_person_name\",",
													"        \"contact_patronymic\",",
													"        \"email\",",
													"        \"phone\",",
													"        \"logo\"",
													"      ]",
													"    },",
													"    \"underwriter\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"first_name\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"patronymic\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"last_name\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"email\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"phone\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"is_active\": {",
													"          \"type\": \"boolean\"",
													"        },",
													"        \"date_joined\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"role\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"first_name\",",
													"        \"patronymic\",",
													"        \"last_name\",",
													"        \"email\",",
													"        \"phone\",",
													"        \"is_active\",",
													"        \"date_joined\",",
													"        \"role\"",
													"      ]",
													"    },",
													"    \"pnt\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"eis_link\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"start_date\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"status\",",
													"    \"principal\",",
													"    \"beneficiary\",",
													"    \"guaranty\",",
													"    \"contest\",",
													"    \"ps\",",
													"    \"fp\",",
													"    \"sf\",",
													"    \"bank\",",
													"    \"underwriter\",",
													"    \"pnt\",",
													"    \"eis_link\",",
													"    \"start_date\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/order/order/{{id_order}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"{{id_order}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_order_create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    pm.response.to.have.header(\"Date\");",
													"});",
													"",
													"",
													"const jsonData = pm.response.json();",
													"",
													"pm.collectionVariables.set('id_create_order', jsonData.id)",
													"",
													"",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"status\": {",
													"      \"type\": \"null\"",
													"    },",
													"    \"principal\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"beneficiary\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"guaranty\": {",
													"      \"type\": \"null\"",
													"    },",
													"    \"contest\": {",
													"      \"type\": \"null\"",
													"    },",
													"    \"ps\": {",
													"      \"type\": \"null\"",
													"    },",
													"    \"fp\": {",
													"      \"type\": \"null\"",
													"    },",
													"    \"sf\": {",
													"      \"type\": \"null\"",
													"    },",
													"    \"bank\": {",
													"      \"type\": \"null\"",
													"    },",
													"    \"underwriter\": {",
													"      \"type\": \"null\"",
													"    },",
													"    \"pnt\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"eis_link\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"start_date\": {",
													"      \"type\": \"null\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"status\",",
													"    \"principal\",",
													"    \"beneficiary\",",
													"    \"guaranty\",",
													"    \"contest\",",
													"    \"ps\",",
													"    \"fp\",",
													"    \"sf\",",
													"    \"bank\",",
													"    \"underwriter\",",
													"    \"pnt\",",
													"    \"eis_link\",",
													"    \"start_date\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"principal\": {{id_principal}},\n  \"beneficiary\": {{id_beneficiary}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_order_update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    pm.response.to.have.header(\"Date\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"status\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"principal\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"beneficiary\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"guaranty\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"contest\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"ps\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"fp\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"sf\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"bank\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"underwriter\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"pnt\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"eis_link\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"start_date\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"status\",",
													"    \"principal\",",
													"    \"beneficiary\",",
													"    \"guaranty\",",
													"    \"contest\",",
													"    \"ps\",",
													"    \"fp\",",
													"    \"sf\",",
													"    \"bank\",",
													"    \"underwriter\",",
													"    \"pnt\",",
													"    \"eis_link\",",
													"    \"start_date\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});",
													"",
													"",
													"// дописать тест на проверку значений, все ли изменилось",
													"// if(pm.response.to.have.status(200)){",
													"   ",
													"// }",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"principal\": {{id_principal}},\n  \"beneficiary\": {{id_beneficiary}},\n  \"status\": 1,\n  \"guaranty\": 1,\n  \"contract\": 1,\n  \"contest\": 1,\n  \"ps\": 1,\n  \"fp\": 1,\n  \"sf\": 1,\n  \"bank\": 1,\n  \"underwriter\": {{id_underwriter}},\n  \"pnt\": \"test\",\n  \"eis_link\": \"test\",\n  \"start_date\": \"2025-12-12\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/{{id_create_order}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"{{id_create_order}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_order_partial_update",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Content-Type is present\", function () {",
													"    pm.response.to.have.header(\"Content-Type\");",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    pm.response.to.have.header(\"Date\");",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"status\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"principal\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"beneficiary\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"guaranty\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"contest\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"ps\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"fp\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"sf\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"bank\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"underwriter\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"pnt\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"eis_link\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"start_date\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"status\",",
													"    \"principal\",",
													"    \"beneficiary\",",
													"    \"guaranty\",",
													"    \"contest\",",
													"    \"ps\",",
													"    \"fp\",",
													"    \"sf\",",
													"    \"bank\",",
													"    \"underwriter\",",
													"    \"pnt\",",
													"    \"eis_link\",",
													"    \"start_date\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"principal\": {{id_principal}},\n  \"beneficiary\": {{id_beneficiary}},\n  \"status\": 1,\n  \"guaranty\": 1,\n  \"contract\": 1,\n  \"contest\": 1,\n  \"ps\": 1,\n  \"fp\": 1,\n  \"sf\": 1,\n  \"bank\": 1,\n  \"underwriter\": {{id_underwriter}},\n  \"pnt\": \"test\",\n  \"eis_link\": \"test\",\n  \"start_date\": \"2025-12-12\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/{{id_create_order}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"{{id_create_order}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_order_delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Date is present\", function () {",
													"    pm.response.to.have.header(\"Date\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {
											"accept": true
										}
									},
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{url}}/order/order/{{id_create_order}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"{{id_create_order}}",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "document",
							"item": [
								{
									"name": "order_order_document_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"order\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"document\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"document_title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"document_type\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"order\",",
													"        \"document\",",
													"        \"document_title\",",
													"        \"document_type\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});",
													"",
													"if(jsonData.length > 0){",
													"    pm.collectionVariables.set('id_order_document', jsonData[0].id)",
													"};",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/order_document/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order_document",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_order_document_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"order\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"document\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"document_title\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"document_type\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"order\",",
													"    \"document\",",
													"    \"document_title\",",
													"    \"document_type\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/order/order_document/{{id_order_document}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order_document",
												"{{id_order_document}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "special condition",
							"item": [
								{
									"name": "order_order_special_condition_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"description\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"description\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});",
													"",
													"if(jsonData.length > 0){",
													"    pm.collectionVariables.set('id_order_special_condition', jsonData[0].id)",
													"};",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/order_special_condition/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order_special_condition",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_order_special_condition_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"description\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"title\",",
													"    \"description\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/order_special_condition/{{id_order_special_condition}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order_special_condition",
												"{{id_order_special_condition}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "status",
							"item": [
								{
									"name": "order_order_status_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"description\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"description\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});",
													"",
													"if(jsonData.length > 0){",
													"    pm.collectionVariables.set('id_order_status', jsonData[0].id)",
													"};",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/order_status/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order_status",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_order_status_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"description\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"title\",",
													"    \"description\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    const carrier = JSON.parse(responseBody); ",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disabledSystemHeaders": {}
									},
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{url}}/order/order_status/{{id_order_status}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order_status",
												"{{id_order_status}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "ps",
							"item": [
								{
									"name": "order_ps_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0){",
													"    pm.collectionVariables.set(\"id_ps\", jsonData[0].id)",
													"};",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"value\": {",
													"          \"type\": \"boolean\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"value\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/ps/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"ps",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_ps_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"value\": {",
													"      \"type\": \"boolean\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"title\",",
													"    \"value\"",
													"  ]",
													"};",
													"",
													"pm.test('Shema schemaTest Valid', () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/ps/{{id_ps}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"ps",
												"{{id_ps}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "purchase",
							"item": [
								{
									"name": "order_purchase_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0){",
													"    pm.collectionVariables.set(\"id_purchase\", jsonData[0].id)",
													"};",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"number\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"purchase_object\": {",
													"          \"type\": \"string\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"number\",",
													"        \"purchase_object\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test(\"Shema schemaTest Valid\", () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/purchase/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"purchase",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_purchase_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"number\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"purchase_object\": {",
													"      \"type\": \"string\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"number\",",
													"    \"purchase_object\"",
													"  ]",
													"};",
													"",
													"pm.test(\"Shema schemaTest Valid\", () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/purchase/{{id_purchase}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"purchase",
												"{{id_purchase}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "sf",
							"item": [
								{
									"name": "order_sf_list",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"if (jsonData.length > 0){",
													"    pm.collectionVariables.set(\"id_sf\", jsonData[0].id)",
													"};",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"array\",",
													"  \"items\": [",
													"    {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"id\": {",
													"          \"type\": \"integer\"",
													"        },",
													"        \"title\": {",
													"          \"type\": \"string\"",
													"        },",
													"        \"value\": {",
													"          \"type\": \"boolean\"",
													"        }",
													"      },",
													"      \"required\": [",
													"        \"id\",",
													"        \"title\",",
													"        \"value\"",
													"      ]",
													"    }",
													"  ]",
													"};",
													"",
													"pm.test(\"Shema schemaTest Valid\", () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/sf/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"sf",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "order_sf_read",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"const jsonData = pm.response.json();",
													"",
													"const schemaTest = {",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {",
													"      \"type\": \"integer\"",
													"    },",
													"    \"title\": {",
													"      \"type\": \"string\"",
													"    },",
													"    \"value\": {",
													"      \"type\": \"boolean\"",
													"    }",
													"  },",
													"  \"required\": [",
													"    \"id\",",
													"    \"title\",",
													"    \"value\"",
													"  ]",
													"};",
													"",
													"pm.test(\"Shema schemaTest Valid\", () => {",
													"    pm.expect(tv4.validate(jsonData, schemaTest)).to.be.true",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/order/sf/{{id_sf}}/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"sf",
												"{{id_sf}}",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Content-Type is present\", function () {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"});",
											"pm.test(\"Date is present\", function () {",
											"    pm.response.to.have.header(\"Date\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "order_order_olyver_wyman_score_guarantee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"The response to the request is valid\", function () {\r",
											"    pm.expect(jsonData.status).to.true;\r",
											"});\r",
											"\r",
											"const schemaTest = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    },\r",
											"    \"data\": {\r",
											"      \"type\": \"object\",\r",
											"      \"properties\": {\r",
											"        \"data\": {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"signals\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"BS_1\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_10\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_111\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_14\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_15\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_16\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_18\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_2\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_22\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_23\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_5\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_6\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"BS_7\": {\r",
											"                  \"type\": \"string\"\r",
											"                },\r",
											"                \"GS_0\": {\r",
											"                  \"type\": \"string\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"BS_1\",\r",
											"                \"BS_10\",\r",
											"                \"BS_111\",\r",
											"                \"BS_14\",\r",
											"                \"BS_15\",\r",
											"                \"BS_16\",\r",
											"                \"BS_18\",\r",
											"                \"BS_2\",\r",
											"                \"BS_22\",\r",
											"                \"BS_23\",\r",
											"                \"BS_5\",\r",
											"                \"BS_6\",\r",
											"                \"BS_7\",\r",
											"                \"GS_0\"\r",
											"              ]\r",
											"            },\r",
											"            \"courts\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"Average length of a court case during previous 2 years\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"Number of courts as a claimer during previous 2 years\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"Number of courts as a defendant during previous 2 year\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"Total case value of all courts during previous year as a defendant\": {\r",
											"                  \"type\": \"number\"\r",
											"                },\r",
											"                \"Total case value of all courts during previous year as defendant / EBITDA\": {\r",
											"                  \"type\": \"number\"\r",
											"                },\r",
											"                \"Total case value of all courts during previous year as defendant / Net Profit\": {\r",
											"                  \"type\": \"number\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"Average length of a court case during previous 2 years\",\r",
											"                \"Number of courts as a claimer during previous 2 years\",\r",
											"                \"Number of courts as a defendant during previous 2 year\",\r",
											"                \"Total case value of all courts during previous year as a defendant\",\r",
											"                \"Total case value of all courts during previous year as defendant / EBITDA\",\r",
											"                \"Total case value of all courts during previous year as defendant / Net Profit\"\r",
											"              ]\r",
											"            },\r",
											"            \"executory\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"Number of sufficient enforcement proceeding cases for the last 2 years\": {\r",
											"                  \"type\": \"number\"\r",
											"                },\r",
											"                \"Total enforcement proceeding sum for the last year / Net Profit\": {\r",
											"                  \"type\": \"number\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"Number of sufficient enforcement proceeding cases for the last 2 years\",\r",
											"                \"Total enforcement proceeding sum for the last year / Net Profit\"\r",
											"              ]\r",
											"            },\r",
											"            \"tenders\": {\r",
											"              \"type\": \"object\",\r",
											"              \"properties\": {\r",
											"                \"Percentage of tenders won by the Principal for the last 2 years\": {\r",
											"                  \"type\": \"number\"\r",
											"                },\r",
											"                \"Tenders with the same Beneficiary that were won for the last 5 years\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"Total number of tenders for the last year\": {\r",
											"                  \"type\": \"integer\"\r",
											"                },\r",
											"                \"Total sum for tenders for the last year / Revenue\": {\r",
											"                  \"type\": \"number\"\r",
											"                }\r",
											"              },\r",
											"              \"required\": [\r",
											"                \"Percentage of tenders won by the Principal for the last 2 years\",\r",
											"                \"Tenders with the same Beneficiary that were won for the last 5 years\",\r",
											"                \"Total number of tenders for the last year\",\r",
											"                \"Total sum for tenders for the last year / Revenue\"\r",
											"              ]\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"signals\",\r",
											"            \"courts\",\r",
											"            \"executory\",\r",
											"            \"tenders\"\r",
											"          ]\r",
											"        }\r",
											"      },\r",
											"      \"required\": [\r",
											"        \"data\"\r",
											"      ]\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"status\",\r",
											"    \"data\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Shema schemaTest Valid', () => {\r",
											"    const carrier = JSON.parse(responseBody); \r",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"supplierInn\": \"{{inn_principal}}\",\r\n  \"customerInn\": \"{{inn_beneficiary}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/order/order/olyver_wyman_score_guarantee/",
									"host": [
										"{{url}}"
									],
									"path": [
										"order",
										"order",
										"olyver_wyman_score_guarantee",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "order_order_kontur_financial_indicators",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"The response to the request is valid\", function () {\r",
											"    pm.expect(jsonData.status).to.true;\r",
											"});\r",
											"\r",
											"const schemaTest = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"status\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"status\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Shema schemaTest Valid', () => {\r",
											"    const carrier = JSON.parse(responseBody); \r",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": false
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"inn\": \"{{inn_principal}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/order/order/kontur_financial_indicators/",
									"host": [
										"{{url}}"
									],
									"path": [
										"order",
										"order",
										"kontur_financial_indicators",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "limit",
					"item": [
						{
							"name": "limit_limit_bank_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"bank\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"limit\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"bank\",",
											"        \"limit\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											"",
											"if(jsonData.length > 0){",
											"    pm.collectionVariables.set('id_limit_bank', jsonData[0].id)",
											"};",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{url}}/limit/limit_bank/",
									"host": [
										"{{url}}"
									],
									"path": [
										"limit",
										"limit_bank",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "limit_limit_bank_read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"bank\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"limit\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"bank\",",
											"    \"limit\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/limit/limit_bank/{{id_limit_bank}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"limit",
										"limit_bank",
										"{{id_limit_bank}}",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "entity",
					"item": [
						{
							"name": "entity_beneficiary_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"inn\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"region\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"okved\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"registration_address\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"registration_date\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"inn\",",
											"        \"region\",",
											"        \"okved\",",
											"        \"registration_address\",",
											"        \"registration_date\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											"",
											"if(jsonData.length > 0){",
											"    pm.collectionVariables.set('id_beneficiary', jsonData[0].id)",
											"};",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/entity/beneficiary/",
									"host": [
										"{{url}}"
									],
									"path": [
										"entity",
										"beneficiary",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "entity_beneficiary_read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"title\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"inn\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"region\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"okved\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"registration_address\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"registration_date\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"title\",",
											"    \"inn\",",
											"    \"region\",",
											"    \"okved\",",
											"    \"registration_address\",",
											"    \"registration_date\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/entity/beneficiary/{{id_beneficiary}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"entity",
										"beneficiary",
										"{{id_beneficiary}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "entity_principal_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"inn\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"region\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"okved\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"limit\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"first_name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"last_name\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"patronymic\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"birth_date\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"birth_place\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"passport_series\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"passport_number\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"department_code\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"collect_date\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"collect_by_whom\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"registration_address\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"citizenship\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"inn\",",
											"        \"region\",",
											"        \"okved\",",
											"        \"limit\",",
											"        \"first_name\",",
											"        \"last_name\",",
											"        \"patronymic\",",
											"        \"birth_date\",",
											"        \"birth_place\",",
											"        \"passport_series\",",
											"        \"passport_number\",",
											"        \"department_code\",",
											"        \"collect_date\",",
											"        \"collect_by_whom\",",
											"        \"registration_address\",",
											"        \"citizenship\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											"",
											"if(jsonData.length > 0){",
											"    pm.collectionVariables.set('id_principal', jsonData[0].id)",
											"};",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/entity/principal/",
									"host": [
										"{{url}}"
									],
									"path": [
										"entity",
										"principal",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "entity_principal_read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"title\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"inn\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"region\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"okved\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"limit\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"first_name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"last_name\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"patronymic\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"birth_date\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"birth_place\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"passport_series\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"passport_number\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"department_code\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"collect_date\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"collect_by_whom\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"registration_address\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"citizenship\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"title\",",
											"    \"inn\",",
											"    \"region\",",
											"    \"okved\",",
											"    \"limit\",",
											"    \"first_name\",",
											"    \"last_name\",",
											"    \"patronymic\",",
											"    \"birth_date\",",
											"    \"birth_place\",",
											"    \"passport_series\",",
											"    \"passport_number\",",
											"    \"department_code\",",
											"    \"collect_date\",",
											"    \"collect_by_whom\",",
											"    \"registration_address\",",
											"    \"citizenship\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/entity/principal/{{id_principal}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"entity",
										"principal",
										"{{id_principal}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "entity_principal_financial_indicators_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"inn\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"financial_indicators\": {",
											"          \"type\": \"array\",",
											"          \"items\": [",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            },",
											"            {",
											"              \"type\": \"object\",",
											"              \"properties\": {",
											"                \"year\": {",
											"                  \"type\": \"string\"",
											"                },",
											"                \"security_of_current_assets\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"financial_leverage\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"current_liquid\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"profitability\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"debt\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"service\": {",
											"                  \"type\": \"number\"",
											"                },",
											"                \"revenue\": {",
											"                  \"type\": \"number\"",
											"                }",
											"              },",
											"              \"required\": [",
											"                \"year\",",
											"                \"security_of_current_assets\",",
											"                \"financial_leverage\",",
											"                \"current_liquid\",",
											"                \"profitability\",",
											"                \"debt\",",
											"                \"service\",",
											"                \"revenue\"",
											"              ]",
											"            }",
											"          ]",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"inn\",",
											"        \"financial_indicators\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/entity/principal_financial_indicators/?inn={{inn_principal}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"entity",
										"principal_financial_indicators",
										""
									],
									"query": [
										{
											"key": "inn",
											"value": "{{inn_principal}}",
											"description": "инн принципала"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "handbook",
					"item": [
						{
							"name": "handbook_black_list_item_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"title\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"bank_reason\": {",
											"          \"type\": \"string\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"title\",",
											"        \"bank_reason\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											"",
											"if(jsonData.length > 0){",
											"    pm.collectionVariables.set('id_item_black_list', jsonData[0].id)",
											"};",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/handbook/black_list_item/",
									"host": [
										"{{url}}"
									],
									"path": [
										"handbook",
										"black_list_item",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "handbook_black_list_item_read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"title\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"bank_reason\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"title\",",
											"    \"bank_reason\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/handbook/black_list_item/{{id_item_black_list}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"handbook",
										"black_list_item",
										"{{id_item_black_list}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "handbook_stop_factor_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"description\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"exceptions\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"is_active\": {",
											"          \"type\": \"boolean\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"description\",",
											"        \"exceptions\",",
											"        \"is_active\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											"",
											"if(jsonData.length > 0){",
											"    pm.collectionVariables.set('id_stop_factor', jsonData[0].id)",
											"};",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/handbook/stop_factor/",
									"host": [
										"{{url}}"
									],
									"path": [
										"handbook",
										"stop_factor",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "handbook_stop_factor_read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"description\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"exceptions\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"is_active\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"description\",",
											"    \"exceptions\",",
											"    \"is_active\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/handbook/stop_factor/{{id_stop_factor}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"handbook",
										"stop_factor",
										"{{id_stop_factor}}",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "handbook_warning_signal_list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const jsonData = pm.response.json();",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"array\",",
											"  \"items\": [",
											"    {",
											"      \"type\": \"object\",",
											"      \"properties\": {",
											"        \"id\": {",
											"          \"type\": \"integer\"",
											"        },",
											"        \"description\": {",
											"          \"type\": \"string\"",
											"        },",
											"        \"is_active\": {",
											"          \"type\": \"boolean\"",
											"        }",
											"      },",
											"      \"required\": [",
											"        \"id\",",
											"        \"description\",",
											"        \"is_active\"",
											"      ]",
											"    }",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});",
											"",
											"if(jsonData.length > 0){",
											"    pm.collectionVariables.set('id_warning_signal', jsonData[0].id)",
											"};",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/handbook/warning_signal/",
									"host": [
										"{{url}}"
									],
									"path": [
										"handbook",
										"warning_signal",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "handbook_warning_signal_read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"const schemaTest = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"id\": {",
											"      \"type\": \"integer\"",
											"    },",
											"    \"description\": {",
											"      \"type\": \"string\"",
											"    },",
											"    \"is_active\": {",
											"      \"type\": \"boolean\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"id\",",
											"    \"description\",",
											"    \"is_active\"",
											"  ]",
											"};",
											"",
											"pm.test('Shema schemaTest Valid', () => {",
											"    const carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {}
							},
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/handbook/warning_signal/{{id_warning_signal}}/",
									"host": [
										"{{url}}"
									],
									"path": [
										"handbook",
										"warning_signal",
										"{{id_warning_signal}}",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"// перенесены в папки методов для гибкости применения",
							"",
							"// pm.test(\"Content-Type is present\", function () {",
							"//     pm.response.to.have.header(\"Content-Type\");",
							"// });",
							"// pm.test(\"Date is present\", function () {",
							"//     pm.response.to.have.header(\"Date\");",
							"// });",
							"",
							"",
							"// нужен будет на бою?",
							"// pm.test(\"Content-Encoding is present\", function () {",
							"//     pm.response.to.have.header(\"Content-Encoding\");",
							"// });",
							""
						]
					}
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "101 post_user_user_login_by_email",
					"item": [
						{
							"name": "101 email_invalid_param_test",
							"item": [
								{
									"name": "101 no required field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/login_by_email/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"login_by_email",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "102 empty_string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"\",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/login_by_email/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"login_by_email",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "103 Invalid email address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"email@email.com\",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/login_by_email/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"login_by_email",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "104 incomplete email address",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"ermolaev_i\",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/login_by_email/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"login_by_email",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"The answer is the same\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"wrong auth data\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "101 password_invalid_param_test",
							"item": [
								{
									"name": "101 no required field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{login}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/login_by_email/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"login_by_email",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "102 empty_string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"{{login}}\",\n  \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/login_by_email/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"login_by_email",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "103 Invalid password",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"email\": \"email@email.com\",\n  \"password\": \"{{password}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/login_by_email/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"login_by_email",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"The answer is the same\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"wrong auth data\");",
											"});",
											""
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schemaError = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"error\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"error\"",
									"  ]",
									"}",
									"",
									"pm.test('Shema schemaError Valid', () => {",
									"    var carrier = JSON.parse(responseBody); ",
									"    pm.expect(tv4.validate(carrier, schemaError)).to.be.true",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "102 post_user_user_get_reset_password_link",
					"item": [
						{
							"name": "102 empty_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The answer is the same\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"no email\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								},
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/user/user/get_reset_password_link/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										"get_reset_password_link",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "103 Invalid email address",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"The answer is the same\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(jsonData.error).to.eql(\"no user\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"accept": true
								},
								"disableCookies": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"email@email.email\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/user/user/get_reset_password_link/",
									"host": [
										"{{url}}"
									],
									"path": [
										"user",
										"user",
										"get_reset_password_link",
										""
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"",
									"const schemaError = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"error\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"error\"",
									"  ]",
									"}",
									"",
									"pm.test('Shema schemaError Valid', () => {",
									"    var carrier = JSON.parse(responseBody); ",
									"    pm.expect(tv4.validate(carrier, schemaError)).to.be.true",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "103 post_user_user_reset_password",
					"item": [
						{
							"name": "101 reset_link_invalid_param_test",
							"item": [
								{
									"name": "101 no required field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The answer is the same\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.error).to.eql(\"no reset link\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"password\": \"garpixdev911\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/reset_password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"reset_password",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "102 empty_string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The answer is the same\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.error).to.eql(\"no reset link\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reset_link\": \"\",\n  \"password\": \"garpixdev911\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/reset_password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"reset_password",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "103 Invalid reset_link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The answer is the same\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.error).to.eql(\"no user\");",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reset_link\": \"http://blablabla.com\",\n  \"password\": \"garpixdev911\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/reset_password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"reset_password",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const schemaError = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"error\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"error\"",
											"  ]",
											"}",
											"",
											"pm.test('Shema schemaError Valid', () => {",
											"    var carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaError)).to.be.true",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "101 password_invalid_param_test",
							"item": [
								{
									"name": "101 no required field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The answer is the same\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.error).to.eql(\"no user\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reset_link\": \"{{reset_link}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/reset_password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"reset_password",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "102 empty_string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"The answer is the same\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.error).to.eql(\"no user\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableCookies": true
									},
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"reset_link\": \"{{reset_link}}\",\n  \"password\": \"\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/user/user/reset_password/",
											"host": [
												"{{url}}"
											],
											"path": [
												"user",
												"user",
												"reset_password",
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"",
											"const schemaError = {",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
											"  \"type\": \"object\",",
											"  \"properties\": {",
											"    \"error\": {",
											"      \"type\": \"string\"",
											"    }",
											"  },",
											"  \"required\": [",
											"    \"error\"",
											"  ]",
											"}",
											"",
											"pm.test('Shema schemaError Valid', () => {",
											"    var carrier = JSON.parse(responseBody); ",
											"    pm.expect(tv4.validate(carrier, schemaError)).to.be.true",
											"});"
										]
									}
								}
							]
						}
					],
					"auth": {
						"type": "noauth"
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const schemaError = {",
									"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
									"  \"type\": \"object\",",
									"  \"properties\": {",
									"    \"error\": {",
									"      \"type\": \"string\"",
									"    }",
									"  },",
									"  \"required\": [",
									"    \"error\"",
									"  ]",
									"}",
									"",
									"pm.test('Shema schemaError Valid', () => {",
									"    var carrier = JSON.parse(responseBody); ",
									"    pm.expect(tv4.validate(carrier, schemaError)).to.be.true",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "104 post_order_order_kontur_financial_indicators",
					"item": [
						{
							"name": "101 empty_string",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schemaTest = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"error\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Shema schemaTest Valid', () => {\r",
											"    const carrier = JSON.parse(responseBody); \r",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"\r",
											"pm.test(\"The response to the request is valid\", function () {\r",
											"    pm.expect(jsonData.error).to.have.string(\"no inn\")\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"inn\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/order/order/kontur_financial_indicators/",
									"host": [
										"{{url}}"
									],
									"path": [
										"order",
										"order",
										"kontur_financial_indicators",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "102 invalid inn",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const schemaTest = {\r",
											"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"error\": {\r",
											"      \"type\": \"string\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"error\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Shema schemaTest Valid', () => {\r",
											"    const carrier = JSON.parse(responseBody); \r",
											"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
											"});\r",
											"\r",
											"const jsonData = JSON.parse(responseBody);\r",
											"pm.test(\"The response to the request is valid\", function () {\r",
											"    pm.expect(jsonData.error).to.have.string(\"there is no principal with this inn\")\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableCookies": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"inn\": \"1234\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/order/order/kontur_financial_indicators/",
									"host": [
										"{{url}}"
									],
									"path": [
										"order",
										"order",
										"kontur_financial_indicators",
										""
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "105 order_order_olyver_wyman_score_guarantee",
					"item": [
						{
							"name": "101 supplierInn_invalid_param_test",
							"item": [
								{
									"name": "101 no required field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"The response to the request is valid\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"no supplierInn\");;\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"error\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody); \r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"customerInn\": \"{{inn_beneficiary}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/olyver_wyman_score_guarantee/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"olyver_wyman_score_guarantee",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "102 empty_string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"The response to the request is valid\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"no supplierInn\");;\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"error\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody); \r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"supplierInn\": \"\",\r\n  \"customerInn\": \"{{inn_beneficiary}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/olyver_wyman_score_guarantee/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"olyver_wyman_score_guarantee",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "103 Invalid supplierInn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"The response to the request is valid\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"there is no principal with this supplierInn\");;\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"error\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody); \r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"supplierInn\": \"123\",\r\n  \"customerInn\": \"{{inn_beneficiary}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/olyver_wyman_score_guarantee/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"olyver_wyman_score_guarantee",
												""
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "102 customerInn_invalid_param_test",
							"item": [
								{
									"name": "101 no required field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"The response to the request is valid\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"no customerInn\");;\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"error\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody); \r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"supplierInn\": \"{{inn_principal}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/olyver_wyman_score_guarantee/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"olyver_wyman_score_guarantee",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "102 empty_string",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"The response to the request is valid\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"no customerInn\");;\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"error\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody); \r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"supplierInn\": \"{{inn_principal}}\",\r\n  \"customerInn\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/olyver_wyman_score_guarantee/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"olyver_wyman_score_guarantee",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "103 Invalid supplierInn",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"The response to the request is valid\", function () {\r",
													"    pm.expect(jsonData.error).to.eql(\"there is no beneficiary with this customerInn\");;\r",
													"});\r",
													"\r",
													"const schemaTest = {\r",
													"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
													"  \"type\": \"object\",\r",
													"  \"properties\": {\r",
													"    \"error\": {\r",
													"      \"type\": \"string\"\r",
													"    }\r",
													"  },\r",
													"  \"required\": [\r",
													"    \"error\"\r",
													"  ]\r",
													"};\r",
													"\r",
													"pm.test('Shema schemaTest Valid', () => {\r",
													"    const carrier = JSON.parse(responseBody); \r",
													"    pm.expect(tv4.validate(carrier, schemaTest)).to.be.true\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"supplierInn\": \"{{inn_principal}}\",\r\n  \"customerInn\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/order/order/olyver_wyman_score_guarantee/",
											"host": [
												"{{url}}"
											],
											"path": [
												"order",
												"order",
												"olyver_wyman_score_guarantee",
												""
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{user_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "http://strahgarant.staging.garpix.com/api/v1"
		},
		{
			"key": "login",
			"value": "ermolaev_i@garpix.com"
		},
		{
			"key": "login_underwriter",
			"value": "ermolaev_i@garpix.com"
		},
		{
			"key": "password",
			"value": "garpixdev911"
		},
		{
			"key": "admin_token",
			"value": "QnmwN2D9liSK9QFbgf3Cjf0mhXgNhmnoT6aEuqnHYSyxrGPDRQlJZT09YsY1eCsi"
		},
		{
			"key": "user_token",
			"value": ""
		},
		{
			"key": "inn_principal",
			"value": "6663003127"
		},
		{
			"key": "inn_beneficiary",
			"value": "2367000760"
		},
		{
			"key": "id_user",
			"value": ""
		},
		{
			"key": "id_bank",
			"value": ""
		},
		{
			"key": "id_bank_document",
			"value": ""
		},
		{
			"key": "id_bank_limits",
			"value": ""
		},
		{
			"key": "id_contract",
			"value": ""
		},
		{
			"key": "id_guaranty",
			"value": ""
		},
		{
			"key": "Id_order",
			"value": ""
		},
		{
			"key": "id_order",
			"value": ""
		},
		{
			"key": "id_order_document",
			"value": ""
		},
		{
			"key": "id_order_special_condition",
			"value": ""
		},
		{
			"key": "id_limit_bank",
			"value": ""
		},
		{
			"key": "id_beneficiary",
			"value": ""
		},
		{
			"key": "id_principal",
			"value": ""
		},
		{
			"key": "id_item_black_list",
			"value": ""
		},
		{
			"key": "id_stop_factor",
			"value": ""
		},
		{
			"key": "id_warning_signal",
			"value": ""
		},
		{
			"key": "reset_link",
			"value": "http://strahgarant.staging.garpix.com/recoverPassword/?reset_code=xDjwUESIaPUGvrORotjwAxtXleJBgfDWuEfuXiywWNivfKskCgLPZGZphJWhBJHO"
		},
		{
			"key": "id_underwriter",
			"value": ""
		},
		{
			"key": "id_create_order",
			"value": ""
		},
		{
			"key": "id_order_status",
			"value": ""
		},
		{
			"key": "id_auction",
			"value": ""
		},
		{
			"key": "id_contest_type",
			"value": ""
		},
		{
			"key": "id_fp",
			"value": ""
		},
		{
			"key": "id_lot",
			"value": ""
		},
		{
			"key": "id_ps",
			"value": ""
		},
		{
			"key": "id_sf",
			"value": ""
		},
		{
			"key": "id_purchase",
			"value": ""
		},
		{
			"key": "id_contract_bank",
			"value": ""
		},
		{
			"key": "id_guarantee_bank",
			"value": ""
		},
		{
			"key": "id_guarantee_status_bank",
			"value": ""
		},
		{
			"key": "id_contest",
			"value": ""
		}
	]
}
